
#########################################################################################
########################    Bioinformatics Stronghold    ################################
#########################################################################################

### problem

s = 'AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC'

print (s)

len(s)

count_A = s.count('A')
count_T = s.count('T')
count_G = s.count('G')
count_C = s.count('C')

print (count_A, count_C, count_G, count_T)


## dataset

dataset = 'CGCTATAGAACGAGTAGTAATGGGTGTATAGCATATTAACTATGCTGGGTATTCGATTCTCTCCTAGCCATTATAAGTGTCTTTCGATTCAGGCGTGCGCCCGTAGCGAGTCCGACGAATAAGGAGTAGCGACTGAGTTCAACTGCCCGAGGCCGCAATCTGCAGCCTCACCCTTAAGTGCTGCTGTACCGCACAGAACGCAGGTGTTCTCCAGGCTCGAATACAGTTCCGGGTGATCTCGGACTTCTGCCACAACGTGAGCTGTTCATTTTTGCGCAACCTACTGAGAGCTGAGAGGCCCACCTTTATAACTGGGGCCTTCGTCCAAAGGCCTTAACGGAGCAGCACTAAACAGTTTAAAAACCCTGTGTCCCGTCTCCATAGATTAAACTTGGATGTCATAAGCACTTGTTTTTTGGGACTATGGGTTGAATTCACCCGGGTTCAGAAGAATCGCGTACTAAGCATCCTAAGAGGACATTGTAGCCGATATCACTGAGGCTGAGACCGATCTTGCTTTGAGCACGTCAAAAAAGGAAAAGAGGGGGATGGCCATTGGGGAGACAGGTCATAGGTGAAACTAGACATCATCTATTATTCATAAAAACCTTTTGGCTGTAACGCATGGGTCCAATTTCGGAGCGCACAAATCCGTGGGTTTTTCTGCTCTTCCCGTTTGGAGAAGAGGAGGCTCCAACCTCCAGTGCCACTGCCACACGTAATTACAATTCTGTCTTAACTACCGTGGAAAGCACCGCGCGCAGACGCGCCGTTCTAATTGCGAATACAGCCAGACACTAAGCAGGGTCAGTATTTTCTAACCGAAAGCTGGCTAGGTTGTAATGTCGCCGGTGATTACCGATTGAGTGGTGTTTGCAATGCCTCCA'

print (dataset)

len(dataset)

count_A = dataset.count('A')
count_T = dataset.count('T')
count_G = dataset.count('G')
count_C = dataset.count('C')

print (count_A, count_C, count_G, count_T)

#########################################################################################################################


t = "GATGGAACTTGACTACGTAAATT"
print (t)

u = t.replace ('T', 'U')
print(u)


t2 = "ACTTTGTTGTATCTAAGGTCCCCCCGCTACGAACGAAAGGGTTTGGTTTGCTCTATACCTGTGTCACTAATGAAGTGACCTGGCCGCAAACCACGGGGGTGTTAGACTACAATTTATAAGACGGTGATTAGGGCCAGCGCACTGTAGGATACGTCAGGACCTCGTTCGAGTAGCCATCTCAGTTCCTCACGCTTCGACATGTGCGATGAGGAACTTTTTTCTCCATGCTAAGTGTGCATGCATCACGAGCCAACATTAGTCAGGATTCAGTTGACTCCGATGCGGAGAATTCTCAACTGCCCTTTGCTAGGCCACTATACTACAGCGCGTGCCAACTTGATGTTGAATATAGCGACCAGCGTTTGCTGCATATCCGGTAGCTGATATCACTCATGCCCATTGTATATCTGCCCTGGTGGTACGTCGTACGAGCAATGCTGCGATAATTAAATGGTGCGCCGGACGAGGCAAGTGGGCCGTCTCGCCAAACGCACCACGTCTCAGCTATATCCATTAGCAGAATGAAAGCCACATAGAAGAATGCGTGGGTGATGTTTGATGAAGAATTCAATGCATACACGCTTACCGGGTGGTGTGCTAACAAGGGGATCGTCCGGAAAGAGTGGCTGGAACTACTCAGCACAATCATGGGCTGGCGCAGACCACCTGTCTATCACACTCAGCTGCTACATCACACGGCTTGGGTAGTTCCCGGTGAGATTATCTCTATAGAACTAACTCATCGTATATAGAAACGGCCGCGGGTCGGTTACTCCCCCTTGGCAAGGCCCCCACTCCAGCCACAATGTTATCACTGTTTCGCTAAGCCGCATTTCTGGAGCAGGCTGCAATTAGAGGTAGTGGATGGAACGCGCATCAGGCACAATGACCGAAATTTCTTATGCGCGGCTTCCTCATCCGGATAA"

print(t2)

u2 = t2.replace ('T', 'U')
print(u2)


############################################################################################################

s = 'AAAACCCGGT'
print (s)

### complement mapping

complement = {'A':'T', 'T':'A', 'G':'C', 'C':'G'}

### Find the complement of each nucleotide and reverse the string

reverse_complement_s = "".join(complement[base] for base in reversed(s))

## "".join(): Joins the complemented characters into a single string.

## reversed(s): Reverses the input DNA string. 

## 'complement[base] for base in reversed(s)': Replaces each nucleotide in the reversed string with its complement using the complement dictionary.


print (reverse_complement_s)


### problem dataset

s = 'TAGTCACCTCCATAGCCAGGTGTGATTGTGGATGACCGCGTGTAAGGCCGTCGATATGCTATGTCGGTAAGTTACGTATTAATTACAAATGACGGGCGTAGGTGTTACTGCCGTAGCTTAGTCTCGTAACACGTATCTCTGCCACTCGCGTCCGGTGCCACTAAGCAACATAAAATGCAGCTCGAAGGATACGTCAATCACACTTTTGCACAAACAGTCCGTAATGTTTAGCAATATATAGAAGAATGTCCCGGAGGCATCCCTCATCGTGAACTGTGATGAGACGAAACAAATGCAGCAACCCTTACCGCATCGCTCATTGTTGTCAGTCGTCCCGCTCATAGTGATGGATCTGAGATCATGTCCTACATCCCTACGCTTCGTGCTATTCGTACTAAACTTCTACAATGCTCTGAAAAGAAAACTGGAGGCATATTTGGAGTGAATCCAAAAGGGGGGTTCCCTTGTGCTGTGAGGGTAGAGCAATGGAAGGCAAAGTTGTGCGGTTGTGACATCTCTGGTAGCTATCCTAGAAATAGGTTACGATTCTGTGAATGGCTTTATTCCTCAACGACGAATCGCATACTCTCATCTAATGTCCGACGGCAGTTACGGCCCCACACACGGGGACCAATGCTTAAAGGTGCTGTCTGTCTGAATCACCTAGGTCGACAACCCCAGGTAATGACAGAACTGGGCATGTACACGCTCTAATACATCGCGGTACTCTTATGTGGCTGAGTTCGACGATGACCTGGGGATGAATTGGATCAAGAGAACCTTAGTACCAAAAGGGTACTCTACTCTCTATACTAGCAATTGCGCGATCACTTATTCGTATATGTCGATCGTGACACGGTCGCCGCCCGCCCACACTTACTGACGAGTCCAACAGGCAAATCTAACATCGCGGCGTAAAAGAAATGGCTGTTGT'


print (s)

### complement mapping

complement = {'A':'T', 'T':'A', 'G':'C', 'C':'G'}

### Find the complement of each nucleotide and reverse the string

reverse_complement_s = "".join(complement[base] for base in reversed(s))


print (reverse_complement_s)

######################################################################################################################


